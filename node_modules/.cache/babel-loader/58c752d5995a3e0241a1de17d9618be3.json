{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * jGrowl 1.4.5\n *\n * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)\n * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.\n *\n * Written by Stan Lemon <stosh1985@gmail.com>\n * Last updated: 2015.02.01\n *\n * jGrowl is a jQuery plugin implementing unobtrusive userland notifications.  These\n * notifications function similarly to the Growl Framework available for\n * Mac OS X (http://growl.info).\n *\n * To Do:\n * - Move library settings to containers and allow them to be changed per container\n *\n * Changes in 1.4.5\n * - Fixed arguement list for click callback, thanks @timotheeg\n *\n * Changes in 1.4.4\n * - Revert word-break changes, thanks @curtisgibby\n *\n * Changes in 1.4.3\n * - Fixed opactiy in LESS for older version of IE\n *\n * Changes in 1.4.2\n * - Added word-break to less/css\n *\n * Changes in 1.4.1\n * - Added appendTo option\n * - jQuery compatibility updates\n * - Add check for closing a notification before it opens\n *\n * Changes in 1.4.0\n * - Removed IE6 support\n * - Added LESS support\n *\n * Changes in 1.3.0\n * - Added non-vendor border-radius to stylesheet\n * - Added grunt for generating minified js and css\n * - Added npm package info\n * - Added bower package info\n * - Updates for jshint\n *\n * Changes in 1.2.13\n * - Fixed clearing interval when the container shuts down\n *\n * Changes in 1.2.12\n * - Added compressed versions using UglifyJS and Sqwish\n * - Improved README with configuration options explanation\n * - Added a source map\n *\n * Changes in 1.2.11\n * - Fix artifacts left behind by the shutdown method and text-cleanup\n *\n * Changes in 1.2.10\n * - Fix beforeClose to be called in click event\n *\n * Changes in 1.2.9\n * - Fixed BC break in jQuery 2.0 beta\n *\n * Changes in 1.2.8\n * - Fixes for jQuery 1.9 and the MSIE6 check, note that with jQuery 2.0 support\n *   jGrowl intends to drop support for IE6 altogether\n *\n * Changes in 1.2.6\n * - Fixed js error when a notification is opening and closing at the same time\n *\n * Changes in 1.2.5\n * - Changed wrapper jGrowl's options usage to \"o\" instead of $.jGrowl.defaults\n * - Added themeState option to control 'highlight' or 'error' for jQuery UI\n * - Ammended some CSS to provide default positioning for nested usage.\n * - Changed some CSS to be prefixed with jGrowl- to prevent namespacing issues\n * - Added two new options - openDuration and closeDuration to allow\n *   better control of notification open and close speeds, respectively\n *   Patch contributed by Jesse Vincet.\n * - Added afterOpen callback.  Patch contributed by Russel Branca.\n *\n * Changes in 1.2.4\n * - Fixed IE bug with the close-all button\n * - Fixed IE bug with the filter CSS attribute (special thanks to gotwic)\n * - Update IE opacity CSS\n * - Changed font sizes to use \"em\", and only set the base style\n *\n * Changes in 1.2.3\n * - The callbacks no longer use the container as context, instead they use the actual notification\n * - The callbacks now receive the container as a parameter after the options parameter\n * - beforeOpen and beforeClose now check the return value, if it's false - the notification does\n *   not continue.  The open callback will also halt execution if it returns false.\n * - Fixed bug where containers would get confused\n * - Expanded the pause functionality to pause an entire container.\n *\n * Changes in 1.2.2\n * - Notification can now be theme rolled for jQuery UI, special thanks to Jeff Chan!\n *\n * Changes in 1.2.1\n * - Fixed instance where the interval would fire the close method multiple times.\n * - Added CSS to hide from print media\n * - Fixed issue with closer button when div { position: relative } is set\n * - Fixed leaking issue with multiple containers.  Special thanks to Matthew Hanlon!\n *\n * Changes in 1.2.0\n * - Added message pooling to limit the number of messages appearing at a given time.\n * - Closing a notification is now bound to the notification object and triggered by the close button.\n *\n * Changes in 1.1.2\n * - Added iPhone styled example\n * - Fixed possible IE7 bug when determining if the ie6 class shoudl be applied.\n * - Added template for the close button, so that it's content could be customized.\n *\n * Changes in 1.1.1\n * - Fixed CSS styling bug for ie6 caused by a mispelling\n * - Changes height restriction on default notifications to min-height\n * - Added skinned examples using a variety of images\n * - Added the ability to customize the content of the [close all] box\n * - Added jTweet, an example of using jGrowl + Twitter\n *\n * Changes in 1.1.0\n * - Multiple container and instances.\n * - Standard $.jGrowl() now wraps $.fn.jGrowl() by first establishing a generic jGrowl container.\n * - Instance methods of a jGrowl container can be called by $.fn.jGrowl(methodName)\n * - Added glue preferenced, which allows notifications to be inserted before or after nodes in the container\n * - Added new log callback which is called before anything is done for the notification\n * - Corner's attribute are now applied on an individual notification basis.\n *\n * Changes in 1.0.4\n * - Various CSS fixes so that jGrowl renders correctly in IE6.\n *\n * Changes in 1.0.3\n * - Fixed bug with options persisting across notifications\n * - Fixed theme application bug\n * - Simplified some selectors and manipulations.\n * - Added beforeOpen and beforeClose callbacks\n * - Reorganized some lines of code to be more readable\n * - Removed unnecessary this.defaults context\n * - If corners plugin is present, it's now customizable.\n * - Customizable open animation.\n * - Customizable close animation.\n * - Customizable animation easing.\n * - Added customizable positioning (top-left, top-right, bottom-left, bottom-right, center)\n *\n * Changes in 1.0.2\n * - All CSS styling is now external.\n * - Added a theme parameter which specifies a secondary class for styling, such\n *   that notifications can be customized in appearance on a per message basis.\n * - Notification life span is now customizable on a per message basis.\n * - Added the ability to disable the global closer, enabled by default.\n * - Added callbacks for when a notification is opened or closed.\n * - Added callback for the global closer.\n * - Customizable animation speed.\n * - jGrowl now set itself up and tears itself down.\n *\n * Changes in 1.0.1:\n * - Removed dependency on metadata plugin in favor of .data()\n * - Namespaced all events\n */\n// Support for UMD style\n// Based on UMDjs (https://github.com/umdjs/umd/blob/master/templates/jqueryPlugin.js)\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['jquery'], factory);\n  } else if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === 'object' && module.exports) {\n    module.exports = function (root, jQuery) {\n      if (jQuery === undefined) {\n        if (typeof window !== 'undefined') {\n          jQuery = require('jquery');\n        } else {\n          jQuery = require('jquery')(root);\n        }\n      }\n\n      factory(jQuery);\n      return jQuery;\n    };\n  } else {\n    factory(jQuery);\n  }\n})(function ($) {\n  /** jGrowl Wrapper - Establish a base jGrowl Container for compatibility with older releases. **/\n  $.jGrowl = function (m, o) {\n    // To maintain compatibility with older version that only supported one instance we'll create the base container.\n    if ($('#jGrowl').length === 0) $('<div id=\"jGrowl\"></div>').addClass(o && o.position ? o.position : $.jGrowl.defaults.position).appendTo(o && o.appendTo ? o.appendTo : $.jGrowl.defaults.appendTo); // Create a notification on the container.\n\n    $('#jGrowl').jGrowl(m, o);\n  };\n  /** Raise jGrowl Notification on a jGrowl Container **/\n\n\n  $.fn.jGrowl = function (m, o) {\n    // Short hand for passing in just an object to this method\n    if (o === undefined && $.isPlainObject(m)) {\n      o = m;\n      m = o.message;\n    }\n\n    if ($.isFunction(this.each)) {\n      var args = arguments;\n      return this.each(function () {\n        /** Create a jGrowl Instance on the Container if it does not exist **/\n        if ($(this).data('jGrowl.instance') === undefined) {\n          $(this).data('jGrowl.instance', $.extend(new $.fn.jGrowl(), {\n            notifications: [],\n            element: null,\n            interval: null\n          }));\n          $(this).data('jGrowl.instance').startup(this);\n        }\n        /** Optionally call jGrowl instance methods, or just raise a normal notification **/\n\n\n        if ($.isFunction($(this).data('jGrowl.instance')[m])) {\n          $(this).data('jGrowl.instance')[m].apply($(this).data('jGrowl.instance'), $.makeArray(args).slice(1));\n        } else {\n          $(this).data('jGrowl.instance').create(m, o);\n        }\n      });\n    }\n  };\n\n  $.extend($.fn.jGrowl.prototype, {\n    /** Default JGrowl Settings **/\n    defaults: {\n      pool: 0,\n      header: '',\n      group: '',\n      sticky: false,\n      position: 'top-right',\n      appendTo: 'body',\n      glue: 'after',\n      theme: 'default',\n      themeState: 'highlight',\n      corners: '10px',\n      check: 250,\n      life: 3000,\n      closeDuration: 'normal',\n      openDuration: 'normal',\n      easing: 'swing',\n      closer: true,\n      closeTemplate: '&times;',\n      closerTemplate: '<div>[ close all ]</div>',\n      log: function log() {},\n      beforeOpen: function beforeOpen() {},\n      afterOpen: function afterOpen() {},\n      open: function open() {},\n      beforeClose: function beforeClose() {},\n      close: function close() {},\n      click: function click() {},\n      animateOpen: {\n        opacity: 'show'\n      },\n      animateClose: {\n        opacity: 'hide'\n      }\n    },\n    notifications: [],\n\n    /** jGrowl Container Node **/\n    element: null,\n\n    /** Interval Function **/\n    interval: null,\n\n    /** Create a Notification **/\n    create: function create(message, options) {\n      var o = $.extend({}, this.defaults, options);\n      /* To keep backward compatibility with 1.24 and earlier, honor 'speed' if the user has set it */\n\n      if (typeof o.speed !== 'undefined') {\n        o.openDuration = o.speed;\n        o.closeDuration = o.speed;\n      }\n\n      this.notifications.push({\n        message: message,\n        options: o\n      });\n      o.log.apply(this.element, [this.element, message, o]);\n    },\n    render: function render(n) {\n      var self = this;\n      var message = n.message;\n      var o = n.options; // Support for jQuery theme-states, if this is not used it displays a widget header\n\n      o.themeState = o.themeState === '' ? '' : 'ui-state-' + o.themeState;\n      var notification = $('<div/>').addClass('jGrowl-notification alert ' + o.themeState + ' ui-corner-all' + (o.group !== undefined && o.group !== '' ? ' ' + o.group : '')).append($('<button/>').addClass('jGrowl-close').html(o.closeTemplate)).append($('<div/>').addClass('jGrowl-header').html(o.header)).append($('<div/>').addClass('jGrowl-message').html(message)).data(\"jGrowl\", o).addClass(o.theme).children('.jGrowl-close').bind(\"click.jGrowl\", function () {\n        $(this).parent().trigger('jGrowl.beforeClose');\n        return false;\n      }).parent();\n      /** Notification Actions **/\n\n      $(notification).bind(\"mouseover.jGrowl\", function () {\n        $('.jGrowl-notification', self.element).data(\"jGrowl.pause\", true);\n      }).bind(\"mouseout.jGrowl\", function () {\n        $('.jGrowl-notification', self.element).data(\"jGrowl.pause\", false);\n      }).bind('jGrowl.beforeOpen', function () {\n        if (o.beforeOpen.apply(notification, [notification, message, o, self.element]) !== false) {\n          $(this).trigger('jGrowl.open');\n        }\n      }).bind('jGrowl.open', function () {\n        if (o.open.apply(notification, [notification, message, o, self.element]) !== false) {\n          if (o.glue == 'after') {\n            $('.jGrowl-notification:last', self.element).after(notification);\n          } else {\n            $('.jGrowl-notification:first', self.element).before(notification);\n          }\n\n          $(this).animate(o.animateOpen, o.openDuration, o.easing, function () {\n            // Fixes some anti-aliasing issues with IE filters.\n            if ($.support.opacity === false) this.style.removeAttribute('filter');\n            if ($(this).data(\"jGrowl\") !== null && typeof $(this).data(\"jGrowl\") !== 'undefined') // Happens when a notification is closing before it's open.\n              $(this).data(\"jGrowl\").created = new Date();\n            $(this).trigger('jGrowl.afterOpen');\n          });\n        }\n      }).bind('jGrowl.afterOpen', function () {\n        o.afterOpen.apply(notification, [notification, message, o, self.element]);\n      }).bind('click', function () {\n        o.click.apply(notification, [notification, message, o, self.element]);\n      }).bind('jGrowl.beforeClose', function () {\n        if (o.beforeClose.apply(notification, [notification, message, o, self.element]) !== false) $(this).trigger('jGrowl.close');\n      }).bind('jGrowl.close', function () {\n        // Pause the notification, lest during the course of animation another close event gets called.\n        $(this).data('jGrowl.pause', true);\n        $(this).animate(o.animateClose, o.closeDuration, o.easing, function () {\n          if ($.isFunction(o.close)) {\n            if (o.close.apply(notification, [notification, message, o, self.element]) !== false) $(this).remove();\n          } else {\n            $(this).remove();\n          }\n        });\n      }).trigger('jGrowl.beforeOpen');\n      /** Optional Corners Plugin **/\n\n      if (o.corners !== '' && $.fn.corner !== undefined) $(notification).corner(o.corners);\n      /** Add a Global Closer if more than one notification exists **/\n\n      if ($('.jGrowl-notification:parent', self.element).length > 1 && $('.jGrowl-closer', self.element).length === 0 && this.defaults.closer !== false) {\n        $(this.defaults.closerTemplate).addClass('jGrowl-closer ' + this.defaults.themeState + ' ui-corner-all').addClass(this.defaults.theme).appendTo(self.element).animate(this.defaults.animateOpen, this.defaults.speed, this.defaults.easing).bind(\"click.jGrowl\", function () {\n          $(this).siblings().trigger(\"jGrowl.beforeClose\");\n\n          if ($.isFunction(self.defaults.closer)) {\n            self.defaults.closer.apply($(this).parent()[0], [$(this).parent()[0]]);\n          }\n        });\n      }\n    },\n\n    /** Update the jGrowl Container, removing old jGrowl notifications **/\n    update: function update() {\n      $(this.element).find('.jGrowl-notification:parent').each(function () {\n        if ($(this).data(\"jGrowl\") !== undefined && $(this).data(\"jGrowl\").created !== undefined && $(this).data(\"jGrowl\").created.getTime() + parseInt($(this).data(\"jGrowl\").life, 10) < new Date().getTime() && $(this).data(\"jGrowl\").sticky !== true && ($(this).data(\"jGrowl.pause\") === undefined || $(this).data(\"jGrowl.pause\") !== true)) {\n          // Pause the notification, lest during the course of animation another close event gets called.\n          $(this).trigger('jGrowl.beforeClose');\n        }\n      });\n      if (this.notifications.length > 0 && (this.defaults.pool === 0 || $(this.element).find('.jGrowl-notification:parent').length < this.defaults.pool)) this.render(this.notifications.shift());\n\n      if ($(this.element).find('.jGrowl-notification:parent').length < 2) {\n        $(this.element).find('.jGrowl-closer').animate(this.defaults.animateClose, this.defaults.speed, this.defaults.easing, function () {\n          $(this).remove();\n        });\n      }\n    },\n\n    /** Setup the jGrowl Notification Container **/\n    startup: function startup(e) {\n      this.element = $(e).addClass('jGrowl').append('<div class=\"jGrowl-notification\"></div>');\n      this.interval = setInterval(function () {\n        // some error in chage ^^\n        var instance = $(e).data('jGrowl.instance');\n\n        if (undefined !== instance) {\n          try {\n            instance.update();\n          } catch (e) {\n            instance.shutdown();\n            throw e;\n          }\n        }\n      }, parseInt(this.defaults.check, 10));\n    },\n\n    /** Shutdown jGrowl, removing it and clearing the interval **/\n    shutdown: function shutdown() {\n      try {\n        $(this.element).removeClass('jGrowl').find('.jGrowl-notification').trigger('jGrowl.close').parent().empty();\n      } catch (e) {\n        throw e;\n      } finally {\n        clearInterval(this.interval);\n      }\n    },\n    close: function close() {\n      $(this.element).find('.jGrowl-notification').each(function () {\n        $(this).trigger('jGrowl.beforeClose');\n      });\n    }\n  });\n  /** Reference the Defaults Object for compatibility with older versions of jGrowl **/\n\n  $.jGrowl.defaults = $.fn.jGrowl.prototype.defaults;\n});","map":null,"metadata":{},"sourceType":"module"}